<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Mélanie's Blog</title><link>https://melaniebrg.github.io/</link><description>Recent content on Mélanie's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 10 Nov 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://melaniebrg.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Blockchain Application in Royalty Management for Digital Content Protection</title><link>https://melaniebrg.github.io/posts/dcp/blockchain-project/</link><pubDate>Fri, 10 Nov 2023 00:00:00 +0000</pubDate><guid>https://melaniebrg.github.io/posts/dcp/blockchain-project/</guid><description>In collaboration with Kanita Loisy and Pauline Spinga, I delved into a project focusing on the application of blockchain technology in royalty management for the course &amp;ldquo;Digital Content Protection&amp;rdquo; . As the digitization of resources continues to proliferate, the need for robust protection mechanisms has become increasingly apparent. Our project aimed to explore how blockchain could revolutionize the management of intellectual property rights, particularly in the realm of visual content.</description></item><item><title>Ubiquitous Computing: A Vision and Reality</title><link>https://melaniebrg.github.io/posts/hci/ubiquitous/</link><pubDate>Tue, 31 Oct 2023 00:00:00 +0000</pubDate><guid>https://melaniebrg.github.io/posts/hci/ubiquitous/</guid><description>Introduction: In 1991, computer scientist Mark Weiser introduced the concept of &amp;ldquo;ubiquitous computing,&amp;rdquo; envisioning a world where technology seamlessly integrates into our daily lives. Today, we&amp;rsquo;ll explore whether we are already living in a world of ubiquitous computing, highlighting both what has been achieved and what remains on the horizon.
What is &amp;ldquo;Ubiquitous Computing&amp;rdquo; ? Ubiquitous computing, often referred to as &amp;ldquo;pervasive computing,&amp;rdquo; is a paradigm where computing technology is seamlessly embedded in the environment, making it an invisible and integral part of our daily lives.</description></item><item><title>The shape of smartphones</title><link>https://melaniebrg.github.io/posts/hci/current/</link><pubDate>Mon, 30 Oct 2023 00:00:00 +0000</pubDate><guid>https://melaniebrg.github.io/posts/hci/current/</guid><description>Mobile phones have come a long way in terms of design over the past decade. In this blog post, we&amp;rsquo;ll take a closer look at the evolution of mobile phone design and shape, with a specific focus on weight, thickness, and display size.
Weight Matters: Mobile phone manufacturers have been on a mission to make our devices smaller and lighter. While the average weight of mobile phones has remained relatively consistent, it&amp;rsquo;s worth noting that modern high-end smartphones now pack more features into smaller, lighter packages.</description></item><item><title>Spread Spectrum Watermarking Lab</title><link>https://melaniebrg.github.io/posts/dcp/watermarking-lab/</link><pubDate>Fri, 27 Oct 2023 00:00:00 +0000</pubDate><guid>https://melaniebrg.github.io/posts/dcp/watermarking-lab/</guid><description>Name Course Date Mélanie Brégou Digital content protection 27/10/2023 Objective : Implement a spread spectrum watermarking method, with a focus on utilizing off-the-shelf random number generators, understanding the principles of uniform and Gaussian distributed generators, exploring correlation functions, and applying these concepts towards CDMA-based watermarking.
Table of Contents Off-the-Shelf Random Number Generators Principles Uniform Distributed Generator Gaussian Distributed Generator Correlation Functions Graphical Representation and Properties Temporal Autocorrelation Function Cross-Correlation Function Towards CDMA Study the robustness against noise addition CDMA-Based Watermarking Off-the-Shelf Random Number Generators Principles import matplotlib.</description></item><item><title>Enhancing human habilities in the age of Augmented Reality</title><link>https://melaniebrg.github.io/posts/hci/futur/</link><pubDate>Sat, 21 Oct 2023 00:00:00 +0000</pubDate><guid>https://melaniebrg.github.io/posts/hci/futur/</guid><description>In today&amp;rsquo;s fast-paced world, technology has become an integral part of our daily lives, and it&amp;rsquo;s continually reshaping the way we go about our routines. Augmented Reality (AR) is one such technology that holds the potential to enhance human abilities and make our lives more efficient and enjoyable. In this blog article, I present an innovative project aimed at transforming the way we plan meals, manage kitchen inventory, and shop for groceries – all through the lens of AR.</description></item><item><title>Input Devices and Interaction Paradigms</title><link>https://melaniebrg.github.io/posts/hci/failed_input/</link><pubDate>Fri, 20 Oct 2023 00:00:00 +0000</pubDate><guid>https://melaniebrg.github.io/posts/hci/failed_input/</guid><description>The &amp;ldquo;FeetThrough: Electrotactile Foot Interface&amp;rdquo; is an interesting haptic input device that falls into the category of a sensory or haptic user interface. It aims to provide haptic feedback to the user&amp;rsquo;s feet, enhancing their sensory experience during foot-based activities, such as walking, stepping on virtual textures, or interacting with virtual environments. While it&amp;rsquo;s a promising concept with potential benefits, there are factors that have contributed to its limited success or challenges it may face in the future.</description></item><item><title>2D Image filtering Lab</title><link>https://melaniebrg.github.io/posts/dcp/filtering-lab/</link><pubDate>Fri, 13 Oct 2023 00:00:00 +0000</pubDate><guid>https://melaniebrg.github.io/posts/dcp/filtering-lab/</guid><description>Name Course Date Mélanie Brégou Digital content protection 13/10/2023 Objective : relate the transform representation and its visual impact
Table of Contents Compute the 2D-DCT for the images Low pass filtering High pass filtering Illustrating how the spatial DCT frequencies are related the visual content Compute the 2D-DCT for the images The Two-Dimensional Discrete Cosine Transform is a mathematical operation applied in image processing to represent images in a frequency domain.</description></item><item><title>3D platform game Unity</title><link>https://melaniebrg.github.io/posts/cg/unity-project/</link><pubDate>Tue, 10 Oct 2023 00:00:00 +0000</pubDate><guid>https://melaniebrg.github.io/posts/cg/unity-project/</guid><description>Introduction After a 12-hour class at the Institut Polytechnique de Paris, where we explored the fundamentals of Unity, Pauline Spinga and I embarked on a creative project to model and develop a music-themed platform game named &amp;ldquo;Virtuoso&amp;rdquo;. In this game, players step into the shoes of Vivaldi, a character who has lost his piano and guitar and must embark on a journey through the changing seasons to recover his instruments while collecting musical notes along the way.</description></item><item><title>The Ultimate Display</title><link>https://melaniebrg.github.io/posts/hci/ultimate_display/</link><pubDate>Tue, 10 Oct 2023 00:00:00 +0000</pubDate><guid>https://melaniebrg.github.io/posts/hci/ultimate_display/</guid><description>In this article, we will delve into the visionary concepts put forth by Ivan Sutherland in his seminal paper, &amp;ldquo;The Ultimate Display&amp;rdquo; written in 1965. He envisaged several possibilities, some of which have already materialized, while others remain on the horizon:
Advanced Graphics and Visualization: Sutherland anticipated the development of computer displays capable of rendering plot, curves or graphics. Today, modern graphics cards and software can produce highly detailed and realistic 2D and 3D graphics for applications such as gaming and scientific simulations.</description></item><item><title>Presentation of HCI researcher</title><link>https://melaniebrg.github.io/posts/hci/researcher/</link><pubDate>Mon, 09 Oct 2023 00:00:00 +0000</pubDate><guid>https://melaniebrg.github.io/posts/hci/researcher/</guid><description>Exploring the Pioneering HCI Research of Dr. Elizabeth Churchill Brief introduction Dr. Elizabeth Churchill, currently a Director of User Experience at Google in Mountain View, California, has drawn on social, computer, engineering and data sciences to create innovative end-user applications and services for the past 20 years.
Academic Background She holds a PhD from the University of Cambridge, an honorary Doctor of Science (DSc.) from the University of Sussex, and in September will be awarded an honorary doctorate from the University of Stockholm.</description></item><item><title>Illustrations on image encryption and steganography Lab</title><link>https://melaniebrg.github.io/posts/dcp/encryption-lab/</link><pubDate>Fri, 06 Oct 2023 00:00:00 +0000</pubDate><guid>https://melaniebrg.github.io/posts/dcp/encryption-lab/</guid><description>Name Course Date Mélanie Brégou Digital content protection 06/10/2023 Objective : delve into image encryption and steganography, exploring classical ciphers and digital techniques.
Table of Contents CAESAR cipher Simple substitution cipher Simple transposition cipher LSB (lowest significant bit) steganography Image compression in JPG Image compression in PNG LSB with 2 significant bit from matplotlib import image import matplotlib.pyplot as plt import numpy as np import random from PIL import Image Firstly, let&amp;rsquo;s display the images used for this lab.</description></item><item><title>Affordance in daily life</title><link>https://melaniebrg.github.io/posts/hci/affordance/</link><pubDate>Sat, 30 Sep 2023 00:00:00 +0000</pubDate><guid>https://melaniebrg.github.io/posts/hci/affordance/</guid><description>After a 6-hour lecture introducing Human-Computer Interaction (HCI), our first homework was to find real-life objects that exemplify the concepts in HCI.
Affordances Definition Before we delve into real-life examples, let&amp;rsquo;s define what an affordance in HCI. Affordance refers to the inherent usability or functionality of an object, interface, or system. It&amp;rsquo;s a concept that suggests what actions can be performed with an object and how those actions can be intuitively understood by users.</description></item><item><title>Developing a Rollerball Game in Unity</title><link>https://melaniebrg.github.io/posts/hci/simple-unity-project/</link><pubDate>Sat, 30 Sep 2023 00:00:00 +0000</pubDate><guid>https://melaniebrg.github.io/posts/hci/simple-unity-project/</guid><description>Introduction In this article, I will walk you through the process of developing a rollerball game in Unity, where the player controls a ball on a plane, collecting stars while avoiding red enemies. My game includes both static and shooter enemies, a health system with three lives, and a Game Over screen that allows players to restart or exit the game. Let&amp;rsquo;s dive into the development process step by step.</description></item><item><title>Unity Installation</title><link>https://melaniebrg.github.io/posts/hci/unity-install/</link><pubDate>Sat, 30 Sep 2023 00:00:00 +0000</pubDate><guid>https://melaniebrg.github.io/posts/hci/unity-install/</guid><description>Introduction: Getting started with game development is an exciting journey, and Unity is an essential tool for aspiring developers. Thanks to the helpful guidance of my teacher, Léa Saunier, I successfully installed Unity on my M1 Mac computer. In this article, I&amp;rsquo;ll provide a brief step-by-step guide on how to install Unity based on Léa Saunier&amp;rsquo;s tutorial.
Step 1: Download Unity Hub Begin by downloading Unity Hub from https://unity.com/download. Unity Hub acts as a central management tool for your Unity projects and installations.</description></item><item><title>Blender project : My guitar in 3D !</title><link>https://melaniebrg.github.io/posts/cg/blender-project/</link><pubDate>Thu, 28 Sep 2023 08:06:25 +0600</pubDate><guid>https://melaniebrg.github.io/posts/cg/blender-project/</guid><description>After a 9-hour introductory class to Blender, I took on the challenge of creating a 3D model of my Taylor 510ce guitar. In this article, I&amp;rsquo;ll walk you through the steps I followed to bring this project to life.
Gathering Reference image To start, I began by capturing reference photos of my guitar from both side and front angles. I then removed the background of these images using Photoshop and put them as background images on x and y axis in Blender.</description></item><item><title>Creating a Portfolio Website with Hugo and Deploying on GitHub Pages</title><link>https://melaniebrg.github.io/posts/hci/blog-creation/</link><pubDate>Sat, 23 Sep 2023 00:00:00 +0000</pubDate><guid>https://melaniebrg.github.io/posts/hci/blog-creation/</guid><description>As part of my Human-Computer Interface class, I was tasked with creating a blog to showcase my work during my master&amp;rsquo;s program. I opted to build my website using Hugo, a fast and modern static site generator. In this guide, I will walk you through the steps to set up your own portfolio website using Hugo and deploy it on GitHub Pages.
Here are the different steps to set up this portfolio :</description></item><item><title>Introduction</title><link>https://melaniebrg.github.io/posts/introduction/</link><pubDate>Fri, 22 Sep 2023 00:00:00 +0000</pubDate><guid>https://melaniebrg.github.io/posts/introduction/</guid><description>Welcome to the blog section of my portfolio website, where I present some of my work, projects, and experiments in:
Human-Computer Interface Computer Graphics Digital Content Protection</description></item><item><title>Go পরিচিতি</title><link>https://melaniebrg.github.io/notes/go/basic/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://melaniebrg.github.io/notes/go/basic/introduction/</guid><description> Hello World A sample go program is show here.
package main import &amp;#34;fmt&amp;#34; func main() { message := greetMe(&amp;#34;world&amp;#34;) fmt.Println(message) } func greetMe(name string) string { return &amp;#34;Hello, &amp;#34; + name + &amp;#34;!&amp;#34; } Run the program as below:
$ go run hello.go Variables Normal Declaration:
var msg string msg = &amp;#34;Hello&amp;#34; Shortcut:
msg := &amp;#34;Hello&amp;#34; Constants const Phi = 1.618</description></item><item><title>Go বেসিক</title><link>https://melaniebrg.github.io/notes/go/basic/_index.bn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://melaniebrg.github.io/notes/go/basic/_index.bn/</guid><description/></item><item><title>অ্যাডভান্সড</title><link>https://melaniebrg.github.io/notes/go/advanced/_index.bn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://melaniebrg.github.io/notes/go/advanced/_index.bn/</guid><description/></item><item><title>বেসিক টাইপ সমূহ</title><link>https://melaniebrg.github.io/notes/go/basic/types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://melaniebrg.github.io/notes/go/basic/types/</guid><description>Strings str := &amp;#34;Hello&amp;#34; Multiline string
str := `Multiline string` Numbers Typical types
num := 3 // int num := 3. // float64 num := 3 + 4i // complex128 num := byte(&amp;#39;a&amp;#39;) // byte (alias for uint8) Other Types
var u uint = 7 // uint (unsigned) var p float32 = 22.7 // 32-bit float Arrays // var numbers [5]int numbers := [...]int{0, 0, 0, 0, 0} Pointers func main () { b := *getPointer() fmt.</description></item><item><title>Flow Control</title><link>https://melaniebrg.github.io/notes/go/basic/flow-control/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://melaniebrg.github.io/notes/go/basic/flow-control/</guid><description>Condition if day == &amp;#34;sunday&amp;#34; || day == &amp;#34;saturday&amp;#34; { rest() } else if day == &amp;#34;monday&amp;#34; &amp;amp;&amp;amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(&amp;#34;Uh oh&amp;#34;) Switch switch day { case &amp;#34;sunday&amp;#34;: // cases don&amp;#39;t &amp;#34;fall through&amp;#34; by default! fallthrough case &amp;#34;saturday&amp;#34;: rest() default: work() } Loop for count := 0; count &amp;lt;= 10; count++ { fmt.Println(&amp;#34;My counter is at&amp;#34;, count) } entry := []string{&amp;#34;Jack&amp;#34;,&amp;#34;John&amp;#34;,&amp;#34;Jones&amp;#34;} for i, val := range entry { fmt.</description></item><item><title>ফাইল ম্যানিপুলেশন</title><link>https://melaniebrg.github.io/notes/go/advanced/files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://melaniebrg.github.io/notes/go/advanced/files/</guid><description> Condition if day == &amp;#34;sunday&amp;#34; || day == &amp;#34;saturday&amp;#34; { rest() } else if day == &amp;#34;monday&amp;#34; &amp;amp;&amp;amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(&amp;#34;Uh oh&amp;#34;)</description></item><item><title>Bash Variables</title><link>https://melaniebrg.github.io/notes/bash/basic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://melaniebrg.github.io/notes/bash/basic/</guid><description> Variable NAME=&amp;#34;John&amp;#34; echo $NAME echo &amp;#34;$NAME&amp;#34; echo &amp;#34;${NAME} Condition if [[ -z &amp;#34;$string&amp;#34; ]]; then echo &amp;#34;String is empty&amp;#34; elif [[ -n &amp;#34;$string&amp;#34; ]]; then echo &amp;#34;String is not empty&amp;#34; fi</description></item><item><title>Go এর নোট সমূহ</title><link>https://melaniebrg.github.io/notes/go/_index.bn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://melaniebrg.github.io/notes/go/_index.bn/</guid><description>Go Notes</description></item></channel></rss>