[{"categories":null,"contents":" Hello World A sample go program is show here.\npackage main import \u0026#34;fmt\u0026#34; func main() { message := greetMe(\u0026#34;world\u0026#34;) fmt.Println(message) } func greetMe(name string) string { return \u0026#34;Hello, \u0026#34; + name + \u0026#34;!\u0026#34; } Run the program as below:\n$ go run hello.go Variables Normal Declaration:\nvar msg string msg = \u0026#34;Hello\u0026#34; Shortcut:\nmsg := \u0026#34;Hello\u0026#34; Constants const Phi = 1.618 ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://melaniebrg.github.io/notes/go/basic/introduction/","summary":" Hello World A sample go program is show here.\npackage main import \u0026#34;fmt\u0026#34; func main() { message := greetMe(\u0026#34;world\u0026#34;) fmt.Println(message) } func greetMe(name string) string { return \u0026#34;Hello, \u0026#34; + name + \u0026#34;!\u0026#34; } Run the program as below:\n$ go run hello.go Variables Normal Declaration:\nvar msg string msg = \u0026#34;Hello\u0026#34; Shortcut:\nmsg := \u0026#34;Hello\u0026#34; Constants const Phi = 1.618 ","tags":null,"title":"Go পরিচিতি"},{"categories":null,"contents":"","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://melaniebrg.github.io/notes/go/basic/_index.bn/","summary":"","tags":null,"title":"Go বেসিক"},{"categories":null,"contents":"","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://melaniebrg.github.io/notes/go/advanced/_index.bn/","summary":"","tags":null,"title":"অ্যাডভান্সড"},{"categories":null,"contents":" Strings str := \u0026#34;Hello\u0026#34; Multiline string\nstr := `Multiline string` Numbers Typical types\nnum := 3 // int num := 3. // float64 num := 3 + 4i // complex128 num := byte(\u0026#39;a\u0026#39;) // byte (alias for uint8) Other Types\nvar u uint = 7 // uint (unsigned) var p float32 = 22.7 // 32-bit float Arrays // var numbers [5]int numbers := [...]int{0, 0, 0, 0, 0} Pointers func main () { b := *getPointer() fmt.Println(\u0026#34;Value is\u0026#34;, b) func getPointer () (myPointer *int) { a := 234 return \u0026amp;a a := new(int) *a = 234 Pointers point to a memory location of a variable. Go is fully garbage-collected.\nType Conversion i := 2 f := float64(i) u := uint(i) Slice slice := []int{2, 3, 4} slice := []byte(\u0026#34;Hello\u0026#34;) ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://melaniebrg.github.io/notes/go/basic/types/","summary":"Strings str := \u0026#34;Hello\u0026#34; Multiline string\nstr := `Multiline string` Numbers Typical types\nnum := 3 // int num := 3. // float64 num := 3 + 4i // complex128 num := byte(\u0026#39;a\u0026#39;) // byte (alias for uint8) Other Types\nvar u uint = 7 // uint (unsigned) var p float32 = 22.7 // 32-bit float Arrays // var numbers [5]int numbers := [...]int{0, 0, 0, 0, 0} Pointers func main () { b := *getPointer() fmt.","tags":null,"title":"বেসিক টাইপ সমূহ"},{"categories":null,"contents":" Condition if day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;) Switch switch day { case \u0026#34;sunday\u0026#34;: // cases don\u0026#39;t \u0026#34;fall through\u0026#34; by default! fallthrough case \u0026#34;saturday\u0026#34;: rest() default: work() } Loop for count := 0; count \u0026lt;= 10; count++ { fmt.Println(\u0026#34;My counter is at\u0026#34;, count) } entry := []string{\u0026#34;Jack\u0026#34;,\u0026#34;John\u0026#34;,\u0026#34;Jones\u0026#34;} for i, val := range entry { fmt.Printf(\u0026#34;At position %d, the character %s is present\\n\u0026#34;, i, val) n := 0 x := 42 for n != x { n := guess() } ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://melaniebrg.github.io/notes/go/basic/flow-control/","summary":"Condition if day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;) Switch switch day { case \u0026#34;sunday\u0026#34;: // cases don\u0026#39;t \u0026#34;fall through\u0026#34; by default! fallthrough case \u0026#34;saturday\u0026#34;: rest() default: work() } Loop for count := 0; count \u0026lt;= 10; count++ { fmt.Println(\u0026#34;My counter is at\u0026#34;, count) } entry := []string{\u0026#34;Jack\u0026#34;,\u0026#34;John\u0026#34;,\u0026#34;Jones\u0026#34;} for i, val := range entry { fmt.","tags":null,"title":"Flow Control"},{"categories":null,"contents":" Condition if day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;) ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://melaniebrg.github.io/notes/go/advanced/files/","summary":" Condition if day == \u0026#34;sunday\u0026#34; || day == \u0026#34;saturday\u0026#34; { rest() } else if day == \u0026#34;monday\u0026#34; \u0026amp;\u0026amp; isTired() { groan() } else { work() } if _, err := doThing(); err != nil { fmt.Println(\u0026#34;Uh oh\u0026#34;) ","tags":null,"title":"ফাইল ম্যানিপুলেশন"},{"categories":null,"contents":" Variable NAME=\u0026#34;John\u0026#34; echo $NAME echo \u0026#34;$NAME\u0026#34; echo \u0026#34;${NAME} Condition if [[ -z \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is empty\u0026#34; elif [[ -n \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is not empty\u0026#34; fi ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://melaniebrg.github.io/notes/bash/basic/","summary":" Variable NAME=\u0026#34;John\u0026#34; echo $NAME echo \u0026#34;$NAME\u0026#34; echo \u0026#34;${NAME} Condition if [[ -z \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is empty\u0026#34; elif [[ -n \u0026#34;$string\u0026#34; ]]; then echo \u0026#34;String is not empty\u0026#34; fi ","tags":null,"title":"Bash Variables"},{"categories":null,"contents":"After a 6-hour lecture introducing Human-Computer Interaction (HCI), our first homework was to find real-life objects that exemplify the concepts in HCI.\nAffordances Definition Before we delve into real-life examples, let\u0026rsquo;s define what an affordance in HCI. Affordance refers to the inherent usability or functionality of an object, interface, or system. It\u0026rsquo;s a concept that suggests what actions can be performed with an object and how those actions can be intuitively understood by users.\nGood Affordance Example: The Guitar Stand One excellent example of a good affordance is a simple guitar stand. Indeed, the guitar stand provides a clear and intuitive affordance for users to place their guitars securely.\nThe mapping of where to place the guitar on the stand is straightforward. The shape of the stand corresponds to the shape of the guitar, making it easy to understand how to position the instrument. When you place a guitar on the stand, you feel a sense of stability and support. This feedback reinforces the understanding that the stand is designed for this purpose. Bad Affordance Example: The Complex Guitar Amplifier On the other hand, let\u0026rsquo;s consider a guitar amplifier with an abundance of buttons and controls as an example of a bad affordance.\nWhile the amplifier\u0026rsquo;s purpose is clear—to amplify the guitar\u0026rsquo;s sound—the multitude of buttons, knobs, and switches can overwhelm users, making it challenging to determine their functions at a glance.\nThe mapping between the controls and their effects on the sound may not be immediately evident. Users may need to consult a manual or experiment extensively to understand how to achieve their desired sound.\nHow to Improve the Guitar Amplifier\u0026rsquo;s Affordance To enhance the affordance of the guitar amplifier, several improvements can be made:\nSimplify Controls: Reduce the number of controls and group related functions together. Use labels and icons to make the purpose of each control more apparent. Visual Feedback: Incorporate more LED indicators or display screens to provide real-time visual feedback on the settings\u0026rsquo; impact on sound. Gestalt Laws Definition The Gestalt principles, developed by German psychologists, explain how humans interpret their complex surroundings. These principles help us understand why we perceive certain visual and auditory phenomena and make sense of seemingly chaotic information. There are six fundamental Gestalt principles:\nSimilarity: Similar things tend to appear grouped together, both visually and auditorily. We naturally group objects based on their similarity, such as color or sound. Prägnanz: This principle, also called the law of simplicity, suggests that our brains simplify complex objects into recognizable forms. For example, we see the Olympic logo as overlapping circles, not complex lines. Proximity: Objects physically close to each other are seen as more related. This leads to the grouping of nearby elements. Continuity: Points connected by smooth lines are perceived as related. Elements along a line or curve are seen as more connected. Closure: We perceive elements as belonging together if they complete some entity, even with missing information. Our brains fill in gaps to create meaningful patterns. Common Region: Elements within the same closed region are seen as related. This principle explains why elements within a defined boundary appear connected. Examples Userinyerface The game Userinyerface is a prime example of a digital interface that intentionally disregards several Gestalt Laws, creating a frustrating and confusing user experience. If you try the game you will observe that it introduces complexity and confusion in its design, challenging the notion of simplicity (Prägnanz), visual elements do not follow smooth paths or logical sequences, further adding to the disorienting experience (Continuity), consistency in color, shape, and styling is intentionally disrupted to defy user expectations (Similarity).\nThe game therefore highlights the importance of following Gestalt principles in real-world design to create user-friendly and intuitive interfaces.\nMoodle website Another example, though less critical than the game, is the login experience on the Moodle website where courses are accessed. The website design disregards Gestalt principles, leading to a potentially frustrating user experience.\nProblem: The \u0026ldquo;Connexion\u0026rdquo; (Login) button is tiny and has light text and color, making it less prominent (Prägnanz). After clicking it, users are directed to a page where they need to choose their school, introducing an unexpected step that disrupts the Law of Closure.\nCorrection: To enhance the user experience and align the design with Gestalt principles, consider implementing the following changes:\nButton Visibility: Increase the visibility of the \u0026ldquo;Connexion\u0026rdquo; button by using a contrasting color, a larger font size, or bold text to make it more prominent. This makes it easier for users to identify and initiate the login process. Streamline Login: Aim to simplify the login process. Direct users to the login form immediately after clicking the \u0026ldquo;Connexion\u0026rdquo; button. If school selection is necessary, integrate it into the login form as a dropdown menu or a clear, concise choice, rather than leading users to a separate page. Dark designs ","date":"September 30, 2023","hero":"/posts/hci/affordance/vox_front.jpg","permalink":"https://melaniebrg.github.io/posts/hci/affordance/","summary":"After a 6-hour lecture introducing Human-Computer Interaction (HCI), our first homework was to find real-life objects that exemplify the concepts in HCI.\nAffordances Definition Before we delve into real-life examples, let\u0026rsquo;s define what an affordance in HCI. Affordance refers to the inherent usability or functionality of an object, interface, or system. It\u0026rsquo;s a concept that suggests what actions can be performed with an object and how those actions can be intuitively understood by users.","tags":null,"title":"Affordance in daily life"},{"categories":["blog"],"contents":"Welcome to the blog section of my portfolio website, where I present some of my work, projects, and experiments in:\nHCI : Human-Computer Interface CG : Computer Graphics DL : Deep learning ","date":"September 24, 2023","hero":"/posts/introduction/space.jpg","permalink":"https://melaniebrg.github.io/posts/introduction/","summary":"Welcome to the blog section of my portfolio website, where I present some of my work, projects, and experiments in:\nHCI : Human-Computer Interface CG : Computer Graphics DL : Deep learning ","tags":["Introduction","Blog"],"title":"Introduction"},{"categories":null,"contents":"As part of my Human-Computer Interface class, I was tasked with creating a blog to showcase my work during my master\u0026rsquo;s program. I opted to build my website using Hugo, a fast and modern static site generator. In this guide, I will walk you through the steps to set up your own portfolio website using Hugo and deploy it on GitHub Pages.\nHere are the different steps to set up this portfolio :\nInstallation on MacOs Open a terminal and execute the following command to install Hugo using Homebrew: brew install hugo Visit the Hugo Themes website and choose the Toha theme. Then, access the Github repository. Fork the repository and rename it to [your GitHub username].github.io Clone the repository to your local machine: git clone https://github.com/[your GitHub username]/[your GitHub username].github.io.git Website personalization Once you have cloned the repository, open the project in Visual Studio Code or your preferred text editor. Modify the config.yaml file and set baseURL = https://[your github username].github.io. Choose the languages you want to use for the website Customize the template to suit your needs. You can use YAML files in the /data directory for the portfolio page and create blog articles in the /content/posts . Visualize your website locally with the following command hugo server -D Deployment in Github Pages Ensure that your repository name is [your GitHub username].github.io Create a gh-pages branch typing the following command : git checkout -b gh-pages Push the gh-pages branch to Github : git push origin gh-pages Check if the template provides a workflow in .github/workflows/deploy-site.yaml for automated deployments using GitHub Actions. Go back to the main branch and push all your changes Your portfolio website is now accessible at https://[your github username].github.io ","date":"September 23, 2023","hero":"/posts/hci/blog-creation/hero.svg","permalink":"https://melaniebrg.github.io/posts/hci/blog-creation/","summary":"As part of my Human-Computer Interface class, I was tasked with creating a blog to showcase my work during my master\u0026rsquo;s program. I opted to build my website using Hugo, a fast and modern static site generator. In this guide, I will walk you through the steps to set up your own portfolio website using Hugo and deploy it on GitHub Pages.\nHere are the different steps to set up this portfolio :","tags":null,"title":"Creating a Portfolio Website with Hugo and Deploying on GitHub Pages"},{"categories":["blender"],"contents":"For my Blender class project, I took on the challenge of creating a 3D model of my Taylor 510ce guitar. In this article, I\u0026rsquo;ll walk you through the steps I followed to bring this project to life.\nStep 1: Gathering Reference image To start, I began by capturing reference photos of my guitar from both side and front angles. I then removed the background of these images using Photoshop and put them as background images on x and y axis in Blender.\nStep 2: Setting Up Background Images With my reference images prepared, I imported them into Blender and positioned them as background images on both the X and Y axes. These images served as blueprints, helping me maintain the accurate proportions and details of the guitar throughout the modeling process.\nStep 3: Modeling the Guitar The core of this project was modeling the guitar\u0026rsquo;s intricate shape. I began by using Blender\u0026rsquo;s Knife tool to outline the guitar\u0026rsquo;s body on a plane. Afterward, I extruded and adjusted vertices to match the contours and dimensions of the reference images. Moving on to the neck and headstock, I created these components using cube primitives. I then proceeded to model other components such as the head, bridge, strings, and smaller details like the rosette, pickguard, and tuners.\nStep 4: Applying Textures Once satisfied with the 3D structure, I shifted my attention to applying textures to the model. I used the reference pictures to ensure the textures were authentically replicated.\nStep 5: Creating the Scene To showcase the 3D guitar effectively, I created a virtual room environment within Blender. Adjusting the lighting and spotlights helped illuminate the guitar in a way that highlighted its details.\nStep 6: Crafting the Animation Finally, to provide a multifaceted view of the guitar, I created a simple camera animation.\n","date":"June 8, 2020","hero":"/images/default-hero.jpg","permalink":"https://melaniebrg.github.io/posts/cg/blender-project/blender/","summary":"For my Blender class project, I took on the challenge of creating a 3D model of my Taylor 510ce guitar. In this article, I\u0026rsquo;ll walk you through the steps I followed to bring this project to life.\nStep 1: Gathering Reference image To start, I began by capturing reference photos of my guitar from both side and front angles. I then removed the background of these images using Photoshop and put them as background images on x and y axis in Blender.","tags":["blender"],"title":"Blender project : My guitar in 3D !"},{"categories":null,"contents":"This is a sample post intended to test the followings:\nDefault hero image. Different shortcodes. Alert The following alerts are available in this theme.\nThis is sample alert with type=\u0026quot;success\u0026quot;. This is sample alert with type=\u0026quot;danger\u0026quot;. This is sample alert with type=\u0026quot;warning\u0026quot;. This is sample alert with type=\u0026quot;info\u0026quot;. This is sample alert with type=\u0026quot;dark\u0026quot;. This is sample alert with type=\u0026quot;primary\u0026quot;. This is sample alert with type=\u0026quot;secondary\u0026quot;. Image A sample image without any attribute. A sample image with height and width attributes. A center aligned image with height and width attributes. A image with float attribute. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras egestas lectus sed leo ultricies ultricies. Praesent tellus risus, eleifend vel efficitur ac, venenatis sit amet sem. Ut ut egestas erat. Fusce ut leo turpis. Morbi consectetur sed lacus vitae vehicula. Cras gravida turpis id eleifend volutpat. Suspendisse nec ipsum eu erat finibus dictum. Morbi volutpat nulla purus, vel maximus ex molestie id. Nullam posuere est urna, at fringilla eros venenatis quis.\nFusce vulputate dolor augue, ut porta sapien fringilla nec. Vivamus commodo erat felis, a sodales lectus finibus nec. In a pulvinar orci. Maecenas suscipit eget lorem non pretium. Nulla aliquam a augue nec blandit. Curabitur ac urna iaculis, ornare ligula nec, placerat nulla. Maecenas aliquam nisi vitae tempus vulputate.\nSplit This theme support splitting the page into as many columns as you wish.\nTwo column split Left Column Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras egestas lectus sed leo ultricies ultricies. Right Column Fusce ut leo turpis. Morbi consectetur sed lacus vitae vehicula. Cras gravida turpis id eleifend volutpat. Three column split Left Column Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras egestas lectus sed leo ultricies ultricies. Middle Column Aenean dignissim dictum ex. Donec a nunc vel nibh placerat interdum. Right Column Fusce ut leo turpis. Morbi consectetur sed lacus vitae vehicula. Cras gravida turpis id eleifend volutpat. Vertical Space Give vertical space between two lines.\nThis is line one. This is line two. It should have 4rem vertical space with previous line.\nVideo Video by Rahul Sharma from Pexels.\nMermaid Here, are few example of mermaid shortcode.\nGraph:\ngraph LR; A[Hard edge] --\u003e|Link text| B(Round edge) B --\u003e C{Decision} C --\u003e|One| D[Result one] C --\u003e|Two| E[Result two] Sequence Diagram:\nsequenceDiagram participant Alice participant Bob Alice-\u003e\u003eJohn: Hello John, how are you? loop Healthcheck John-\u003e\u003eJohn: Fight against hypochondria end Note right of John: Rational thoughts prevail! John--\u003e\u003eAlice: Great! John-\u003e\u003eBob: How about you? Bob--\u003e\u003eJohn: Jolly good! Gantt diagram:\ngantt dateFormat YYYY-MM-DD title Adding GANTT diagram to mermaid excludes weekdays 2014-01-10 section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d Class Diagram:\nclassDiagram Class01 \u003c|-- AveryLongClass : Cool Class03 *-- Class04 Class05 o-- Class06 Class07 .. Class08 Class09 --\u003e C2 : Where am i? Class09 --* C3 Class09 --|\u003e Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla Class08 \u003c--\u003e C2: Cool label Git Graph:\ngitGraph: options { \"nodeSpacing\": 150, \"nodeRadius\": 10 } end commit branch newbranch checkout newbranch commit commit checkout master commit commit merge newbranch ER Diagram:\nerDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses Gist ","date":"June 8, 2020","hero":"/images/default-hero.jpg","permalink":"https://melaniebrg.github.io/posts/shortcode/myshortcode/","summary":"This is a sample post intended to test the followings:\nDefault hero image. Different shortcodes. Alert The following alerts are available in this theme.\nThis is sample alert with type=\u0026quot;success\u0026quot;. This is sample alert with type=\u0026quot;danger\u0026quot;. This is sample alert with type=\u0026quot;warning\u0026quot;. This is sample alert with type=\u0026quot;info\u0026quot;. This is sample alert with type=\u0026quot;dark\u0026quot;. This is sample alert with type=\u0026quot;primary\u0026quot;. This is sample alert with type=\u0026quot;secondary\u0026quot;. Image A sample image without any attribute.","tags":null,"title":"Shortcodes Samples"},{"categories":["unity"],"contents":"// article incoming\n","date":"June 8, 2020","hero":"/images/default-hero.jpg","permalink":"https://melaniebrg.github.io/posts/cg/unity-project/","summary":"// article incoming","tags":["platform"],"title":"Unity 3D platform game"},{"categories":null,"contents":"Go Notes ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://melaniebrg.github.io/notes/go/_index.bn/","summary":"Go Notes ","tags":null,"title":"Go এর নোট সমূহ"}]